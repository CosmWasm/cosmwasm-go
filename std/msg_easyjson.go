// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *WithdrawMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in WithdrawMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	if in.Recipient != "" {
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *WasmMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execute":
			if in.IsNull() {
				in.Skip()
				out.Execute = nil
			} else {
				if out.Execute == nil {
					out.Execute = new(ExecuteMsg)
				}
				(*out.Execute).UnmarshalEasyJSON(in)
			}
		case "instantiate":
			if in.IsNull() {
				in.Skip()
				out.Instantiate = nil
			} else {
				if out.Instantiate == nil {
					out.Instantiate = new(InstantiateMsg)
				}
				(*out.Instantiate).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in WasmMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Execute != nil {
		const prefix string = ",\"execute\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Execute).MarshalEasyJSON(out)
	}
	if in.Instantiate != nil {
		const prefix string = ",\"instantiate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Instantiate).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WasmMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WasmMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WasmMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WasmMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *UndelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in UndelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UndelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UndelegateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UndelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UndelegateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *StakingMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegate":
			if in.IsNull() {
				in.Skip()
				out.Delegate = nil
			} else {
				if out.Delegate == nil {
					out.Delegate = new(DelegateMsg)
				}
				(*out.Delegate).UnmarshalEasyJSON(in)
			}
		case "undelegate":
			if in.IsNull() {
				in.Skip()
				out.Undelegate = nil
			} else {
				if out.Undelegate == nil {
					out.Undelegate = new(UndelegateMsg)
				}
				(*out.Undelegate).UnmarshalEasyJSON(in)
			}
		case "redelegate":
			if in.IsNull() {
				in.Skip()
				out.Redelegate = nil
			} else {
				if out.Redelegate == nil {
					out.Redelegate = new(RedelegateMsg)
				}
				(*out.Redelegate).UnmarshalEasyJSON(in)
			}
		case "withdraw":
			if in.IsNull() {
				in.Skip()
				out.Withdraw = nil
			} else {
				if out.Withdraw == nil {
					out.Withdraw = new(WithdrawMsg)
				}
				(*out.Withdraw).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in StakingMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delegate != nil {
		const prefix string = ",\"delegate\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Delegate).MarshalEasyJSON(out)
	}
	if in.Undelegate != nil {
		const prefix string = ",\"undelegate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Undelegate).MarshalEasyJSON(out)
	}
	if in.Redelegate != nil {
		const prefix string = ",\"redelegate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Redelegate).MarshalEasyJSON(out)
	}
	if in.Withdraw != nil {
		const prefix string = ",\"withdraw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Withdraw).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *SendMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from_address":
			out.FromAddress = string(in.String())
		case "to_address":
			out.ToAddress = string(in.String())
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				in.Delim('[')
				if out.Amount == nil {
					if !in.IsDelim(']') {
						out.Amount = make([]Coin, 0, 2)
					} else {
						out.Amount = []Coin{}
					}
				} else {
					out.Amount = (out.Amount)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Coin
					(v1).UnmarshalEasyJSON(in)
					out.Amount = append(out.Amount, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in SendMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from_address\":"
		out.RawString(prefix[1:])
		out.String(string(in.FromAddress))
	}
	{
		const prefix string = ",\"to_address\":"
		out.RawString(prefix)
		out.String(string(in.ToAddress))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Amount {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd5(in *jlexer.Lexer, out *RedelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "src_validator":
			out.SrcValidator = string(in.String())
		case "dst_validator":
			out.DstValidator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd5(out *jwriter.Writer, in RedelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"src_validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.SrcValidator))
	}
	{
		const prefix string = ",\"dst_validator\":"
		out.RawString(prefix)
		out.String(string(in.DstValidator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedelegateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedelegateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd5(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd6(in *jlexer.Lexer, out *MigrateResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(MigrateResponse)
				}
				(*out.Ok).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd6(out *jwriter.Writer, in MigrateResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalEasyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MigrateResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MigrateResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd6(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd7(in *jlexer.Lexer, out *MigrateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]CosmosMsg, 0, 1)
					} else {
						out.Messages = []CosmosMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CosmosMsg
					(v4).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v6 EventAttribute
					(v6).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd7(out *jwriter.Writer, in MigrateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v7, v8 := range in.Messages {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Attributes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MigrateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MigrateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd7(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd8(in *jlexer.Lexer, out *InstantiateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code_id":
			out.CodeID = uint64(in.Uint64())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				in.Delim('[')
				if out.Send == nil {
					if !in.IsDelim(']') {
						out.Send = make([]Coin, 0, 2)
					} else {
						out.Send = []Coin{}
					}
				} else {
					out.Send = (out.Send)[:0]
				}
				for !in.IsDelim(']') {
					var v14 Coin
					(v14).UnmarshalEasyJSON(in)
					out.Send = append(out.Send, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd8(out *jwriter.Writer, in InstantiateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.CodeID))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	{
		const prefix string = ",\"send\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Send {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstantiateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstantiateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd8(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd9(in *jlexer.Lexer, out *InitResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(InitResponse)
				}
				(*out.Ok).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd9(out *jwriter.Writer, in InitResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalEasyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd9(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd10(in *jlexer.Lexer, out *InitResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]CosmosMsg, 0, 1)
					} else {
						out.Messages = []CosmosMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v19 CosmosMsg
					(v19).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v20 EventAttribute
					(v20).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd10(out *jwriter.Writer, in InitResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v21, v22 := range in.Messages {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Attributes {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd10(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd11(in *jlexer.Lexer, out *HandleResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(HandleResponse)
				}
				(*out.Ok).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd11(out *jwriter.Writer, in HandleResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalEasyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HandleResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HandleResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HandleResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HandleResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd11(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd12(in *jlexer.Lexer, out *HandleResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]CosmosMsg, 0, 1)
					} else {
						out.Messages = []CosmosMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v25 CosmosMsg
					(v25).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v27 EventAttribute
					(v27).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd12(out *jwriter.Writer, in HandleResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v28, v29 := range in.Messages {
				if v28 > 0 {
					out.RawByte(',')
				}
				(v29).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.Attributes {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HandleResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HandleResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HandleResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HandleResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd12(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd13(in *jlexer.Lexer, out *ExecuteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				in.Delim('[')
				if out.Send == nil {
					if !in.IsDelim(']') {
						out.Send = make([]Coin, 0, 2)
					} else {
						out.Send = []Coin{}
					}
				} else {
					out.Send = (out.Send)[:0]
				}
				for !in.IsDelim(']') {
					var v35 Coin
					(v35).UnmarshalEasyJSON(in)
					out.Send = append(out.Send, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd13(out *jwriter.Writer, in ExecuteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	{
		const prefix string = ",\"send\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v38, v39 := range in.Send {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecuteMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd13(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd14(in *jlexer.Lexer, out *EventAttribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd14(out *jwriter.Writer, in EventAttribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventAttribute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventAttribute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventAttribute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventAttribute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd14(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd15(in *jlexer.Lexer, out *DelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd15(out *jwriter.Writer, in DelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DelegateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DelegateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd15(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd16(in *jlexer.Lexer, out *CosmosMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank":
			if in.IsNull() {
				in.Skip()
				out.Bank = nil
			} else {
				if out.Bank == nil {
					out.Bank = new(BankMsg)
				}
				(*out.Bank).UnmarshalEasyJSON(in)
			}
		case "custom":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Custom).UnmarshalJSON(data))
			}
		case "staking":
			if in.IsNull() {
				in.Skip()
				out.Staking = nil
			} else {
				if out.Staking == nil {
					out.Staking = new(StakingMsg)
				}
				(*out.Staking).UnmarshalEasyJSON(in)
			}
		case "wasm":
			if in.IsNull() {
				in.Skip()
				out.Wasm = nil
			} else {
				if out.Wasm == nil {
					out.Wasm = new(WasmMsg)
				}
				(*out.Wasm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd16(out *jwriter.Writer, in CosmosMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bank != nil {
		const prefix string = ",\"bank\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Bank).MarshalEasyJSON(out)
	}
	if len(in.Custom) != 0 {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Custom).MarshalJSON())
	}
	if in.Staking != nil {
		const prefix string = ",\"staking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Staking).MarshalEasyJSON(out)
	}
	if in.Wasm != nil {
		const prefix string = ",\"wasm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Wasm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CosmosMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CosmosMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CosmosMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CosmosMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd16(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd17(in *jlexer.Lexer, out *BankMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				if out.Send == nil {
					out.Send = new(SendMsg)
				}
				(*out.Send).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd17(out *jwriter.Writer, in BankMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Send != nil {
		const prefix string = ",\"send\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Send).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoStd17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoStd17(l, v)
}
