// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes(in *jlexer.Lexer, out *WithdrawDelegatorRewardMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes(out *jwriter.Writer, in WithdrawDelegatorRewardMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawDelegatorRewardMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v WithdrawDelegatorRewardMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawDelegatorRewardMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *WithdrawDelegatorRewardMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes1(in *jlexer.Lexer, out *WasmMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execute":
			if in.IsNull() {
				in.Skip()
				out.Execute = nil
			} else {
				if out.Execute == nil {
					out.Execute = new(ExecuteMsg)
				}
				(*out.Execute).UnmarshalTinyJSON(in)
			}
		case "instantiate":
			if in.IsNull() {
				in.Skip()
				out.Instantiate = nil
			} else {
				if out.Instantiate == nil {
					out.Instantiate = new(InstantiateMsg)
				}
				(*out.Instantiate).UnmarshalTinyJSON(in)
			}
		case "migrate":
			if in.IsNull() {
				in.Skip()
				out.Migrate = nil
			} else {
				if out.Migrate == nil {
					out.Migrate = new(MigrateMsg)
				}
				(*out.Migrate).UnmarshalTinyJSON(in)
			}
		case "update_admin":
			if in.IsNull() {
				in.Skip()
				out.UpdateAdmin = nil
			} else {
				if out.UpdateAdmin == nil {
					out.UpdateAdmin = new(UpdateAdminMsg)
				}
				(*out.UpdateAdmin).UnmarshalTinyJSON(in)
			}
		case "clear_admin":
			if in.IsNull() {
				in.Skip()
				out.ClearAdmin = nil
			} else {
				if out.ClearAdmin == nil {
					out.ClearAdmin = new(ClearAdminMsg)
				}
				(*out.ClearAdmin).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes1(out *jwriter.Writer, in WasmMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Execute != nil {
		const prefix string = ",\"execute\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Execute).MarshalTinyJSON(out)
	}
	if in.Instantiate != nil {
		const prefix string = ",\"instantiate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Instantiate).MarshalTinyJSON(out)
	}
	if in.Migrate != nil {
		const prefix string = ",\"migrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Migrate).MarshalTinyJSON(out)
	}
	if in.UpdateAdmin != nil {
		const prefix string = ",\"update_admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UpdateAdmin).MarshalTinyJSON(out)
	}
	if in.ClearAdmin != nil {
		const prefix string = ",\"clear_admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ClearAdmin).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WasmMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v WasmMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WasmMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *WasmMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes1(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes2(in *jlexer.Lexer, out *VoteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "proposal_id":
			out.ProposalId = uint64(in.Uint64())
		case "vote":
			out.Vote = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes2(out *jwriter.Writer, in VoteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"proposal_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ProposalId))
	}
	{
		const prefix string = ",\"vote\":"
		out.RawString(prefix)
		out.String(string(in.Vote))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v VoteMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *VoteMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes2(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes3(in *jlexer.Lexer, out *UpdateAdminMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "admin":
			out.Admin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes3(out *jwriter.Writer, in UpdateAdminMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix)
		out.String(string(in.Admin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateAdminMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UpdateAdminMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateAdminMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UpdateAdminMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes3(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes4(in *jlexer.Lexer, out *UndelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes4(out *jwriter.Writer, in UndelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UndelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UndelegateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UndelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UndelegateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes4(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes5(in *jlexer.Lexer, out *StargateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type_url":
			out.TypeURL = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes5(out *jwriter.Writer, in StargateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.TypeURL))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Value)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StargateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v StargateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StargateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *StargateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes5(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes6(in *jlexer.Lexer, out *StakingMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegate":
			if in.IsNull() {
				in.Skip()
				out.Delegate = nil
			} else {
				if out.Delegate == nil {
					out.Delegate = new(DelegateMsg)
				}
				(*out.Delegate).UnmarshalTinyJSON(in)
			}
		case "undelegate":
			if in.IsNull() {
				in.Skip()
				out.Undelegate = nil
			} else {
				if out.Undelegate == nil {
					out.Undelegate = new(UndelegateMsg)
				}
				(*out.Undelegate).UnmarshalTinyJSON(in)
			}
		case "redelegate":
			if in.IsNull() {
				in.Skip()
				out.Redelegate = nil
			} else {
				if out.Redelegate == nil {
					out.Redelegate = new(RedelegateMsg)
				}
				(*out.Redelegate).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes6(out *jwriter.Writer, in StakingMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delegate != nil {
		const prefix string = ",\"delegate\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Delegate).MarshalTinyJSON(out)
	}
	if in.Undelegate != nil {
		const prefix string = ",\"undelegate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Undelegate).MarshalTinyJSON(out)
	}
	if in.Redelegate != nil {
		const prefix string = ",\"redelegate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Redelegate).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v StakingMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *StakingMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes6(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes7(in *jlexer.Lexer, out *SetWithdrawAddressMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes7(out *jwriter.Writer, in SetWithdrawAddressMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetWithdrawAddressMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v SetWithdrawAddressMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetWithdrawAddressMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *SetWithdrawAddressMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes7(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes8(in *jlexer.Lexer, out *SendMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to_address":
			out.ToAddress = string(in.String())
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				in.Delim('[')
				if out.Amount == nil {
					if !in.IsDelim(']') {
						out.Amount = make([]Coin, 0, 2)
					} else {
						out.Amount = []Coin{}
					}
				} else {
					out.Amount = (out.Amount)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Coin
					(v4).UnmarshalTinyJSON(in)
					out.Amount = append(out.Amount, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes8(out *jwriter.Writer, in SendMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to_address\":"
		out.RawString(prefix[1:])
		out.String(string(in.ToAddress))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Amount {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v SendMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *SendMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes8(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes9(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]SubMsg, 0, 0)
					} else {
						out.Messages = []SubMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v7 SubMsg
					(v7).UnmarshalTinyJSON(in)
					out.Messages = append(out.Messages, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 EventAttribute
					(v9).UnmarshalTinyJSON(in)
					out.Attributes = append(out.Attributes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 1)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Event
					(v10).UnmarshalTinyJSON(in)
					out.Events = append(out.Events, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes9(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.Messages {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Attributes {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Events {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Response) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Response) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes9(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes10(in *jlexer.Lexer, out *RedelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "src_validator":
			out.SrcValidator = string(in.String())
		case "dst_validator":
			out.DstValidator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes10(out *jwriter.Writer, in RedelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"src_validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.SrcValidator))
	}
	{
		const prefix string = ",\"dst_validator\":"
		out.RawString(prefix)
		out.String(string(in.DstValidator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v RedelegateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *RedelegateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes10(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes11(in *jlexer.Lexer, out *MigrateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "new_code_id":
			out.NewCodeID = uint64(in.Uint64())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes11(out *jwriter.Writer, in MigrateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"new_code_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.NewCodeID))
	}
	if len(in.Msg) != 0 {
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v MigrateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes11(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *MigrateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes11(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes12(in *jlexer.Lexer, out *InstantiateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code_id":
			out.CodeID = uint64(in.Uint64())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		case "funds":
			if in.IsNull() {
				in.Skip()
				out.Funds = nil
			} else {
				in.Delim('[')
				if out.Funds == nil {
					if !in.IsDelim(']') {
						out.Funds = make([]Coin, 0, 2)
					} else {
						out.Funds = []Coin{}
					}
				} else {
					out.Funds = (out.Funds)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Coin
					(v23).UnmarshalTinyJSON(in)
					out.Funds = append(out.Funds, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "label":
			out.Label = string(in.String())
		case "admin":
			out.Admin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes12(out *jwriter.Writer, in InstantiateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.CodeID))
	}
	if len(in.Msg) != 0 {
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	{
		const prefix string = ",\"funds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Funds {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	if in.Admin != "" {
		const prefix string = ",\"admin\":"
		out.RawString(prefix)
		out.String(string(in.Admin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstantiateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InstantiateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes12(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes12(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes13(in *jlexer.Lexer, out *GovMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vote":
			if in.IsNull() {
				in.Skip()
				out.Vote = nil
			} else {
				if out.Vote == nil {
					out.Vote = new(VoteMsg)
				}
				(*out.Vote).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes13(out *jwriter.Writer, in GovMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Vote != nil {
		const prefix string = ",\"vote\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Vote).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GovMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v GovMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GovMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes13(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *GovMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes13(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes14(in *jlexer.Lexer, out *ExecuteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		case "funds":
			if in.IsNull() {
				in.Skip()
				out.Funds = nil
			} else {
				in.Delim('[')
				if out.Funds == nil {
					if !in.IsDelim(']') {
						out.Funds = make([]Coin, 0, 2)
					} else {
						out.Funds = []Coin{}
					}
				} else {
					out.Funds = (out.Funds)[:0]
				}
				for !in.IsDelim(']') {
					var v29 Coin
					(v29).UnmarshalTinyJSON(in)
					out.Funds = append(out.Funds, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes14(out *jwriter.Writer, in ExecuteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	if len(in.Msg) != 0 {
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	{
		const prefix string = ",\"funds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.Funds {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ExecuteMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes14(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes14(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes15(in *jlexer.Lexer, out *EventAttribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes15(out *jwriter.Writer, in EventAttribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventAttribute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v EventAttribute) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventAttribute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes15(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *EventAttribute) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes15(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes16(in *jlexer.Lexer, out *DistributionMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "set_withdraw_address":
			if in.IsNull() {
				in.Skip()
				out.SetWithdrawAddress = nil
			} else {
				if out.SetWithdrawAddress == nil {
					out.SetWithdrawAddress = new(SetWithdrawAddressMsg)
				}
				(*out.SetWithdrawAddress).UnmarshalTinyJSON(in)
			}
		case "withdraw_delegator_reward":
			if in.IsNull() {
				in.Skip()
				out.WithdrawDelegatorReward = nil
			} else {
				if out.WithdrawDelegatorReward == nil {
					out.WithdrawDelegatorReward = new(WithdrawDelegatorRewardMsg)
				}
				(*out.WithdrawDelegatorReward).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes16(out *jwriter.Writer, in DistributionMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SetWithdrawAddress != nil {
		const prefix string = ",\"set_withdraw_address\":"
		first = false
		out.RawString(prefix[1:])
		(*in.SetWithdrawAddress).MarshalTinyJSON(out)
	}
	if in.WithdrawDelegatorReward != nil {
		const prefix string = ",\"withdraw_delegator_reward\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WithdrawDelegatorReward).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DistributionMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v DistributionMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DistributionMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes16(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *DistributionMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes16(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes17(in *jlexer.Lexer, out *DelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes17(out *jwriter.Writer, in DelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v DelegateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes17(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *DelegateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes17(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes18(in *jlexer.Lexer, out *CosmosMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank":
			if in.IsNull() {
				in.Skip()
				out.Bank = nil
			} else {
				if out.Bank == nil {
					out.Bank = new(BankMsg)
				}
				(*out.Bank).UnmarshalTinyJSON(in)
			}
		case "custom":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Custom).UnmarshalJSON(data))
			}
		case "distribution":
			if in.IsNull() {
				in.Skip()
				out.Distribution = nil
			} else {
				if out.Distribution == nil {
					out.Distribution = new(DistributionMsg)
				}
				(*out.Distribution).UnmarshalTinyJSON(in)
			}
		case "gov":
			if in.IsNull() {
				in.Skip()
				out.Gov = nil
			} else {
				if out.Gov == nil {
					out.Gov = new(GovMsg)
				}
				(*out.Gov).UnmarshalTinyJSON(in)
			}
		case "ibc":
			if in.IsNull() {
				in.Skip()
				out.IBC = nil
			} else {
				if out.IBC == nil {
					out.IBC = new(IBCMsg)
				}
				(*out.IBC).UnmarshalTinyJSON(in)
			}
		case "staking":
			if in.IsNull() {
				in.Skip()
				out.Staking = nil
			} else {
				if out.Staking == nil {
					out.Staking = new(StakingMsg)
				}
				(*out.Staking).UnmarshalTinyJSON(in)
			}
		case "stargate":
			if in.IsNull() {
				in.Skip()
				out.Stargate = nil
			} else {
				if out.Stargate == nil {
					out.Stargate = new(StargateMsg)
				}
				(*out.Stargate).UnmarshalTinyJSON(in)
			}
		case "wasm":
			if in.IsNull() {
				in.Skip()
				out.Wasm = nil
			} else {
				if out.Wasm == nil {
					out.Wasm = new(WasmMsg)
				}
				(*out.Wasm).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes18(out *jwriter.Writer, in CosmosMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bank != nil {
		const prefix string = ",\"bank\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Bank).MarshalTinyJSON(out)
	}
	if len(in.Custom) != 0 {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Custom).MarshalJSON())
	}
	if in.Distribution != nil {
		const prefix string = ",\"distribution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Distribution).MarshalTinyJSON(out)
	}
	if in.Gov != nil {
		const prefix string = ",\"gov\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Gov).MarshalTinyJSON(out)
	}
	if in.IBC != nil {
		const prefix string = ",\"ibc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IBC).MarshalTinyJSON(out)
	}
	if in.Staking != nil {
		const prefix string = ",\"staking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Staking).MarshalTinyJSON(out)
	}
	if in.Stargate != nil {
		const prefix string = ",\"stargate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Stargate).MarshalTinyJSON(out)
	}
	if in.Wasm != nil {
		const prefix string = ",\"wasm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Wasm).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CosmosMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v CosmosMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CosmosMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes18(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *CosmosMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes18(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes19(in *jlexer.Lexer, out *ContractResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(Response)
				}
				(*out.Ok).UnmarshalTinyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes19(out *jwriter.Writer, in ContractResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalTinyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ContractResult) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes19(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ContractResult) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes19(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes20(in *jlexer.Lexer, out *ClearAdminMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes20(out *jwriter.Writer, in ClearAdminMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearAdminMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ClearAdminMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearAdminMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes20(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ClearAdminMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes20(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes21(in *jlexer.Lexer, out *BurnMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				in.Delim('[')
				if out.Amount == nil {
					if !in.IsDelim(']') {
						out.Amount = make([]Coin, 0, 2)
					} else {
						out.Amount = []Coin{}
					}
				} else {
					out.Amount = (out.Amount)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Coin
					(v34).UnmarshalTinyJSON(in)
					out.Amount = append(out.Amount, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes21(out *jwriter.Writer, in BurnMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v35, v36 := range in.Amount {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BurnMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BurnMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BurnMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes21(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BurnMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes21(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes22(in *jlexer.Lexer, out *BankMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				if out.Send == nil {
					out.Send = new(SendMsg)
				}
				(*out.Send).UnmarshalTinyJSON(in)
			}
		case "burn":
			if in.IsNull() {
				in.Skip()
				out.Burn = nil
			} else {
				if out.Burn == nil {
					out.Burn = new(BurnMsg)
				}
				(*out.Burn).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes22(out *jwriter.Writer, in BankMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Send != nil {
		const prefix string = ",\"send\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Send).MarshalTinyJSON(out)
	}
	if in.Burn != nil {
		const prefix string = ",\"burn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Burn).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BankMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComCosmwasmCosmwasmGoStdTypes22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes22(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BankMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComCosmwasmCosmwasmGoStdTypes22(l, v)
}
