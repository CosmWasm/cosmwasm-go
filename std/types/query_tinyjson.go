// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes(in *jlexer.Lexer, out *WasmQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "smart":
			if in.IsNull() {
				in.Skip()
				out.Smart = nil
			} else {
				if out.Smart == nil {
					out.Smart = new(SmartQuery)
				}
				(*out.Smart).UnmarshalTinyJSON(in)
			}
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				if out.Raw == nil {
					out.Raw = new(RawQuery)
				}
				(*out.Raw).UnmarshalTinyJSON(in)
			}
		case "contract_info":
			if in.IsNull() {
				in.Skip()
				out.ContractInfo = nil
			} else {
				if out.ContractInfo == nil {
					out.ContractInfo = new(ContractInfoQuery)
				}
				(*out.ContractInfo).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes(out *jwriter.Writer, in WasmQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Smart != nil {
		const prefix string = ",\"smart\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Smart).MarshalTinyJSON(out)
	}
	if in.Raw != nil {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Raw).MarshalTinyJSON(out)
	}
	if in.ContractInfo != nil {
		const prefix string = ",\"contract_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContractInfo).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WasmQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v WasmQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WasmQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *WasmQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes1(in *jlexer.Lexer, out *ValidatorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			if in.IsNull() {
				in.Skip()
				out.Validator = nil
			} else {
				if out.Validator == nil {
					out.Validator = new(Validator)
				}
				(*out.Validator).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes1(out *jwriter.Writer, in ValidatorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		if in.Validator == nil {
			out.RawString("null")
		} else {
			(*in.Validator).MarshalTinyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValidatorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ValidatorResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValidatorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ValidatorResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes1(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes2(in *jlexer.Lexer, out *ValidatorQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes2(out *jwriter.Writer, in ValidatorQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValidatorQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ValidatorQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValidatorQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ValidatorQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes2(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes3(in *jlexer.Lexer, out *Validator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "commission":
			out.Commission = string(in.String())
		case "max_commission":
			out.MaxCommission = string(in.String())
		case "max_change_rate":
			out.MaxChangeRate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes3(out *jwriter.Writer, in Validator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"max_commission\":"
		out.RawString(prefix)
		out.String(string(in.MaxCommission))
	}
	{
		const prefix string = ",\"max_change_rate\":"
		out.RawString(prefix)
		out.String(string(in.MaxChangeRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Validator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Validator) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Validator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Validator) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes3(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes4(in *jlexer.Lexer, out *StargateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				out.Response = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes4(out *jwriter.Writer, in StargateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Response)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StargateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v StargateResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StargateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *StargateResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes4(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes5(in *jlexer.Lexer, out *StargateQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes5(out *jwriter.Writer, in StargateQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StargateQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v StargateQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StargateQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *StargateQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes5(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes6(in *jlexer.Lexer, out *StakingQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "all_validators":
			if in.IsNull() {
				in.Skip()
				out.AllValidators = nil
			} else {
				if out.AllValidators == nil {
					out.AllValidators = new(AllValidatorsQuery)
				}
				(*out.AllValidators).UnmarshalTinyJSON(in)
			}
		case "validator":
			if in.IsNull() {
				in.Skip()
				out.Validator = nil
			} else {
				if out.Validator == nil {
					out.Validator = new(ValidatorQuery)
				}
				(*out.Validator).UnmarshalTinyJSON(in)
			}
		case "all_delegations":
			if in.IsNull() {
				in.Skip()
				out.AllDelegations = nil
			} else {
				if out.AllDelegations == nil {
					out.AllDelegations = new(AllDelegationsQuery)
				}
				(*out.AllDelegations).UnmarshalTinyJSON(in)
			}
		case "delegation":
			if in.IsNull() {
				in.Skip()
				out.Delegation = nil
			} else {
				if out.Delegation == nil {
					out.Delegation = new(DelegationQuery)
				}
				(*out.Delegation).UnmarshalTinyJSON(in)
			}
		case "bonded_denom":
			if in.IsNull() {
				in.Skip()
				out.BondedDenom = nil
			} else {
				if out.BondedDenom == nil {
					out.BondedDenom = new(BondedDenomQuery)
				}
				(*out.BondedDenom).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes6(out *jwriter.Writer, in StakingQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllValidators != nil {
		const prefix string = ",\"all_validators\":"
		first = false
		out.RawString(prefix[1:])
		(*in.AllValidators).MarshalTinyJSON(out)
	}
	if in.Validator != nil {
		const prefix string = ",\"validator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Validator).MarshalTinyJSON(out)
	}
	if in.AllDelegations != nil {
		const prefix string = ",\"all_delegations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AllDelegations).MarshalTinyJSON(out)
	}
	if in.Delegation != nil {
		const prefix string = ",\"delegation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Delegation).MarshalTinyJSON(out)
	}
	if in.BondedDenom != nil {
		const prefix string = ",\"bonded_denom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BondedDenom).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v StakingQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *StakingQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes6(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes7(in *jlexer.Lexer, out *SmartQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes7(out *jwriter.Writer, in SmartQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmartQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v SmartQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmartQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *SmartQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes7(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes8(in *jlexer.Lexer, out *RawQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes8(out *jwriter.Writer, in RawQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v RawQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *RawQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes8(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes9(in *jlexer.Lexer, out *QueryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				out.Ok = in.Bytes()
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes9(out *jwriter.Writer, in QueryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Ok) != 0 {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Ok)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes9(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes10(in *jlexer.Lexer, out *QueryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank":
			if in.IsNull() {
				in.Skip()
				out.Bank = nil
			} else {
				if out.Bank == nil {
					out.Bank = new(BankQuery)
				}
				(*out.Bank).UnmarshalTinyJSON(in)
			}
		case "custom":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Custom).UnmarshalJSON(data))
			}
		case "ibc":
			if in.IsNull() {
				in.Skip()
				out.IBC = nil
			} else {
				if out.IBC == nil {
					out.IBC = new(IBCQuery)
				}
				(*out.IBC).UnmarshalTinyJSON(in)
			}
		case "staking":
			if in.IsNull() {
				in.Skip()
				out.Staking = nil
			} else {
				if out.Staking == nil {
					out.Staking = new(StakingQuery)
				}
				(*out.Staking).UnmarshalTinyJSON(in)
			}
		case "stargate":
			if in.IsNull() {
				in.Skip()
				out.Stargate = nil
			} else {
				if out.Stargate == nil {
					out.Stargate = new(StargateQuery)
				}
				(*out.Stargate).UnmarshalTinyJSON(in)
			}
		case "wasm":
			if in.IsNull() {
				in.Skip()
				out.Wasm = nil
			} else {
				if out.Wasm == nil {
					out.Wasm = new(WasmQuery)
				}
				(*out.Wasm).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes10(out *jwriter.Writer, in QueryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bank != nil {
		const prefix string = ",\"bank\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Bank).MarshalTinyJSON(out)
	}
	if len(in.Custom) != 0 {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Custom).MarshalJSON())
	}
	if in.IBC != nil {
		const prefix string = ",\"ibc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IBC).MarshalTinyJSON(out)
	}
	if in.Staking != nil {
		const prefix string = ",\"staking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Staking).MarshalTinyJSON(out)
	}
	if in.Stargate != nil {
		const prefix string = ",\"stargate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Stargate).MarshalTinyJSON(out)
	}
	if in.Wasm != nil {
		const prefix string = ",\"wasm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Wasm).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes10(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes11(in *jlexer.Lexer, out *QuerierResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(QueryResponse)
				}
				(*out.Ok).UnmarshalTinyJSON(in)
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Err = nil
			} else {
				if out.Err == nil {
					out.Err = new(SystemError)
				}
				(*out.Err).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes11(out *jwriter.Writer, in QuerierResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalTinyJSON(out)
	}
	if in.Err != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Err).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuerierResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QuerierResult) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuerierResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes11(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QuerierResult) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes11(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes12(in *jlexer.Lexer, out *FullDelegation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		case "accumulated_rewards":
			if in.IsNull() {
				in.Skip()
				out.AccumulatedRewards = nil
			} else {
				in.Delim('[')
				if out.AccumulatedRewards == nil {
					if !in.IsDelim(']') {
						out.AccumulatedRewards = make([]Coin, 0, 2)
					} else {
						out.AccumulatedRewards = []Coin{}
					}
				} else {
					out.AccumulatedRewards = (out.AccumulatedRewards)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Coin
					(v16).UnmarshalTinyJSON(in)
					out.AccumulatedRewards = append(out.AccumulatedRewards, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_redelegate":
			(out.CanRedelegate).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes12(out *jwriter.Writer, in FullDelegation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"accumulated_rewards\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.AccumulatedRewards {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_redelegate\":"
		out.RawString(prefix)
		(in.CanRedelegate).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FullDelegation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v FullDelegation) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FullDelegation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes12(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *FullDelegation) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes12(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes13(in *jlexer.Lexer, out *DelegationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegation":
			if in.IsNull() {
				in.Skip()
				out.Delegation = nil
			} else {
				if out.Delegation == nil {
					out.Delegation = new(FullDelegation)
				}
				(*out.Delegation).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes13(out *jwriter.Writer, in DelegationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delegation != nil {
		const prefix string = ",\"delegation\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Delegation).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v DelegationResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes13(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *DelegationResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes13(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes14(in *jlexer.Lexer, out *DelegationQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes14(out *jwriter.Writer, in DelegationQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegationQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v DelegationQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegationQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes14(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *DelegationQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes14(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes15(in *jlexer.Lexer, out *Delegation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes15(out *jwriter.Writer, in Delegation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Delegation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Delegation) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Delegation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes15(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Delegation) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes15(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes16(in *jlexer.Lexer, out *ContractInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code_id":
			out.CodeID = uint64(in.Uint64())
		case "creator":
			out.Creator = string(in.String())
		case "admin":
			out.Admin = string(in.String())
		case "pinned":
			out.Pinned = bool(in.Bool())
		case "ibc_port":
			out.IBCPort = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes16(out *jwriter.Writer, in ContractInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.CodeID))
	}
	{
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix)
		out.String(string(in.Admin))
	}
	{
		const prefix string = ",\"pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pinned))
	}
	{
		const prefix string = ",\"ibc_port\":"
		out.RawString(prefix)
		out.String(string(in.IBCPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ContractInfoResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes16(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ContractInfoResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes16(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes17(in *jlexer.Lexer, out *ContractInfoQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes17(out *jwriter.Writer, in ContractInfoQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractInfoQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ContractInfoQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractInfoQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes17(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ContractInfoQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes17(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes18(in *jlexer.Lexer, out *BondedDenomResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "denom":
			out.Denom = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes18(out *jwriter.Writer, in BondedDenomResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"denom\":"
		out.RawString(prefix[1:])
		out.String(string(in.Denom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BondedDenomResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BondedDenomResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BondedDenomResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes18(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BondedDenomResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes18(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes19(in *jlexer.Lexer, out *BondedDenomQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes19(out *jwriter.Writer, in BondedDenomQuery) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BondedDenomQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BondedDenomQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BondedDenomQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes19(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BondedDenomQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes19(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes20(in *jlexer.Lexer, out *BankQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			if in.IsNull() {
				in.Skip()
				out.Balance = nil
			} else {
				if out.Balance == nil {
					out.Balance = new(BalanceQuery)
				}
				(*out.Balance).UnmarshalTinyJSON(in)
			}
		case "all_balances":
			if in.IsNull() {
				in.Skip()
				out.AllBalances = nil
			} else {
				if out.AllBalances == nil {
					out.AllBalances = new(AllBalancesQuery)
				}
				(*out.AllBalances).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes20(out *jwriter.Writer, in BankQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Balance != nil {
		const prefix string = ",\"balance\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Balance).MarshalTinyJSON(out)
	}
	if in.AllBalances != nil {
		const prefix string = ",\"all_balances\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AllBalances).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BankQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes20(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BankQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes20(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes21(in *jlexer.Lexer, out *BalanceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes21(out *jwriter.Writer, in BalanceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BalanceResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes21(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BalanceResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes21(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes22(in *jlexer.Lexer, out *BalanceQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "denom":
			out.Denom = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes22(out *jwriter.Writer, in BalanceQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"denom\":"
		out.RawString(prefix)
		out.String(string(in.Denom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BalanceQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes22(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BalanceQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes22(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes23(in *jlexer.Lexer, out *AllValidatorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validators":
			if in.IsNull() {
				in.Skip()
				out.Validators = nil
			} else {
				in.Delim('[')
				if out.Validators == nil {
					if !in.IsDelim(']') {
						out.Validators = make([]Validator, 0, 1)
					} else {
						out.Validators = []Validator{}
					}
				} else {
					out.Validators = (out.Validators)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Validator
					(v19).UnmarshalTinyJSON(in)
					out.Validators = append(out.Validators, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes23(out *jwriter.Writer, in AllValidatorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validators\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v20, v21 := range in.Validators {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllValidatorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllValidatorsResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllValidatorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes23(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllValidatorsResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes23(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes24(in *jlexer.Lexer, out *AllValidatorsQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes24(out *jwriter.Writer, in AllValidatorsQuery) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllValidatorsQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllValidatorsQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllValidatorsQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes24(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllValidatorsQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes24(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes25(in *jlexer.Lexer, out *AllDelegationsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegations":
			if in.IsNull() {
				in.Skip()
				out.Delegations = nil
			} else {
				in.Delim('[')
				if out.Delegations == nil {
					if !in.IsDelim(']') {
						out.Delegations = make([]Delegation, 0, 1)
					} else {
						out.Delegations = []Delegation{}
					}
				} else {
					out.Delegations = (out.Delegations)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Delegation
					(v22).UnmarshalTinyJSON(in)
					out.Delegations = append(out.Delegations, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes25(out *jwriter.Writer, in AllDelegationsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegations\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v23, v24 := range in.Delegations {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllDelegationsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllDelegationsResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllDelegationsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes25(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllDelegationsResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes25(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes26(in *jlexer.Lexer, out *AllDelegationsQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes26(out *jwriter.Writer, in AllDelegationsQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllDelegationsQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllDelegationsQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllDelegationsQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes26(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllDelegationsQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes26(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes27(in *jlexer.Lexer, out *AllBalancesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				in.Delim('[')
				if out.Amount == nil {
					if !in.IsDelim(']') {
						out.Amount = make([]Coin, 0, 2)
					} else {
						out.Amount = []Coin{}
					}
				} else {
					out.Amount = (out.Amount)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Coin
					(v25).UnmarshalTinyJSON(in)
					out.Amount = append(out.Amount, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes27(out *jwriter.Writer, in AllBalancesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v26, v27 := range in.Amount {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllBalancesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllBalancesResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllBalancesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes27(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllBalancesResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes27(l, v)
}
func tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes28(in *jlexer.Lexer, out *AllBalancesQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes28(out *jwriter.Writer, in AllBalancesQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllBalancesQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllBalancesQuery) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonAa6e548eEncodeGithubComCosmwasmCosmwasmGoStdTypes28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllBalancesQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes28(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllBalancesQuery) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonAa6e548eDecodeGithubComCosmwasmCosmwasmGoStdTypes28(l, v)
}
