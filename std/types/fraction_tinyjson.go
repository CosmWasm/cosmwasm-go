// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson94df6a5aDecodeGithubComCosmwasmCosmwasmGoStdTypes(in *jlexer.Lexer, out *UFraction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "numerator":
			out.Numerator = uint64(in.Uint64())
		case "denominator":
			out.Denominator = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson94df6a5aEncodeGithubComCosmwasmCosmwasmGoStdTypes(out *jwriter.Writer, in UFraction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"numerator\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Numerator))
	}
	{
		const prefix string = ",\"denominator\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Denominator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UFraction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson94df6a5aEncodeGithubComCosmwasmCosmwasmGoStdTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UFraction) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson94df6a5aEncodeGithubComCosmwasmCosmwasmGoStdTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UFraction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson94df6a5aDecodeGithubComCosmwasmCosmwasmGoStdTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UFraction) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson94df6a5aDecodeGithubComCosmwasmCosmwasmGoStdTypes(l, v)
}
func tinyjson94df6a5aDecodeGithubComCosmwasmCosmwasmGoStdTypes1(in *jlexer.Lexer, out *Fraction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "numerator":
			out.Numerator = int64(in.Int64())
		case "denominator":
			out.Denominator = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson94df6a5aEncodeGithubComCosmwasmCosmwasmGoStdTypes1(out *jwriter.Writer, in Fraction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"numerator\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Numerator))
	}
	{
		const prefix string = ",\"denominator\":"
		out.RawString(prefix)
		out.Int64(int64(in.Denominator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fraction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson94df6a5aEncodeGithubComCosmwasmCosmwasmGoStdTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Fraction) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson94df6a5aEncodeGithubComCosmwasmCosmwasmGoStdTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fraction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson94df6a5aDecodeGithubComCosmwasmCosmwasmGoStdTypes1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Fraction) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson94df6a5aDecodeGithubComCosmwasmCosmwasmGoStdTypes1(l, v)
}
