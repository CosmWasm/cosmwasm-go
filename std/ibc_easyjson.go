// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	easyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *TransferMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelID = string(in.String())
		case "to_address":
			out.ToAddress = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in TransferMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChannelID))
	}
	{
		const prefix string = ",\"to_address\":"
		out.RawString(prefix)
		out.String(string(in.ToAddress))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *SendPacketMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelID = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in SendPacketMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChannelID))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendPacketMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendPacketMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendPacketMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendPacketMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *PortIDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port_id":
			out.PortID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in PortIDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"port_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PortID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PortIDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PortIDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PortIDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PortIDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *PortIDQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in PortIDQuery) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PortIDQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PortIDQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PortIDQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PortIDQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *ListChannelsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]IBCChannel, 0, 0)
					} else {
						out.Channels = []IBCChannel{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v4 IBCChannel
					(v4).UnmarshalEasyJSON(in)
					out.Channels = append(out.Channels, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in ListChannelsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Channels {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListChannelsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListChannelsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListChannelsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListChannelsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd5(in *jlexer.Lexer, out *ListChannelsQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port_id":
			out.PortID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd5(out *jwriter.Writer, in ListChannelsQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PortID != "" {
		const prefix string = ",\"port_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PortID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListChannelsQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListChannelsQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListChannelsQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListChannelsQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd5(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd6(in *jlexer.Lexer, out *IBCTimeoutBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "revision":
			out.Revision = uint64(in.Uint64())
		case "height":
			out.Height = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd6(out *jwriter.Writer, in IBCTimeoutBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"revision\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Revision))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCTimeoutBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCTimeoutBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCTimeoutBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCTimeoutBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd6(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd7(in *jlexer.Lexer, out *IBCTimeout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block":
			if in.IsNull() {
				in.Skip()
				out.Block = nil
			} else {
				if out.Block == nil {
					out.Block = new(IBCTimeoutBlock)
				}
				(*out.Block).UnmarshalEasyJSON(in)
			}
		case "timestamp":
			out.Timestamp = uint64(in.Uint64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd7(out *jwriter.Writer, in IBCTimeout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"block\":"
		out.RawString(prefix[1:])
		if in.Block == nil {
			out.RawString("null")
		} else {
			(*in.Block).MarshalEasyJSON(out)
		}
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64Str(uint64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCTimeout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCTimeout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCTimeout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCTimeout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd7(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd8(in *jlexer.Lexer, out *IBCReceiveResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(IBCReceiveResponse)
				}
				(*out.Ok).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd8(out *jwriter.Writer, in IBCReceiveResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalEasyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCReceiveResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCReceiveResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCReceiveResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCReceiveResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd8(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd9(in *jlexer.Lexer, out *IBCReceiveResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "acknowledgement":
			if in.IsNull() {
				in.Skip()
				out.Acknowledgement = nil
			} else {
				out.Acknowledgement = in.Bytes()
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]SubMsg, 0, 0)
					} else {
						out.Messages = []SubMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v8 SubMsg
					(v8).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 EventAttribute
					(v9).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 1)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Event
					(v10).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd9(out *jwriter.Writer, in IBCReceiveResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"acknowledgement\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Acknowledgement)
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Messages {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Attributes {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Events {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCReceiveResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCReceiveResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCReceiveResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCReceiveResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd9(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd10(in *jlexer.Lexer, out *IBCQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port_id":
			if in.IsNull() {
				in.Skip()
				out.PortID = nil
			} else {
				if out.PortID == nil {
					out.PortID = new(PortIDQuery)
				}
				(*out.PortID).UnmarshalEasyJSON(in)
			}
		case "list_channels":
			if in.IsNull() {
				in.Skip()
				out.ListChannels = nil
			} else {
				if out.ListChannels == nil {
					out.ListChannels = new(ListChannelsQuery)
				}
				(*out.ListChannels).UnmarshalEasyJSON(in)
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(ChannelQuery)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd10(out *jwriter.Writer, in IBCQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PortID != nil {
		const prefix string = ",\"port_id\":"
		first = false
		out.RawString(prefix[1:])
		(*in.PortID).MarshalEasyJSON(out)
	}
	if in.ListChannels != nil {
		const prefix string = ",\"list_channels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ListChannels).MarshalEasyJSON(out)
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Channel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd10(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd11(in *jlexer.Lexer, out *IBCPacketTimeoutMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "packet":
			(out.Packet).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd11(out *jwriter.Writer, in IBCPacketTimeoutMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"packet\":"
		out.RawString(prefix[1:])
		(in.Packet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCPacketTimeoutMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCPacketTimeoutMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCPacketTimeoutMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCPacketTimeoutMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd11(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd12(in *jlexer.Lexer, out *IBCPacketReceiveMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "packet":
			(out.Packet).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd12(out *jwriter.Writer, in IBCPacketReceiveMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"packet\":"
		out.RawString(prefix[1:])
		(in.Packet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCPacketReceiveMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCPacketReceiveMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCPacketReceiveMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCPacketReceiveMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd12(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd13(in *jlexer.Lexer, out *IBCPacketAckMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "acknowledgement":
			(out.Acknowledgement).UnmarshalEasyJSON(in)
		case "original_packet":
			(out.OriginalPacket).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd13(out *jwriter.Writer, in IBCPacketAckMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"acknowledgement\":"
		out.RawString(prefix[1:])
		(in.Acknowledgement).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"original_packet\":"
		out.RawString(prefix)
		(in.OriginalPacket).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCPacketAckMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCPacketAckMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCPacketAckMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCPacketAckMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd13(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd14(in *jlexer.Lexer, out *IBCPacket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "src":
			(out.Src).UnmarshalEasyJSON(in)
		case "dest":
			(out.Dest).UnmarshalEasyJSON(in)
		case "sequence":
			out.Sequence = uint64(in.Uint64())
		case "timeout":
			(out.Timeout).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd14(out *jwriter.Writer, in IBCPacket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix)
		(in.Src).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"dest\":"
		out.RawString(prefix)
		(in.Dest).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Sequence))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		(in.Timeout).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCPacket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCPacket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCPacket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCPacket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd14(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd15(in *jlexer.Lexer, out *IBCOpenTry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		case "counterparty_version":
			out.CounterpartyVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd15(out *jwriter.Writer, in IBCOpenTry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		(in.Channel).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"counterparty_version\":"
		out.RawString(prefix)
		out.String(string(in.CounterpartyVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCOpenTry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCOpenTry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCOpenTry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCOpenTry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd15(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd16(in *jlexer.Lexer, out *IBCOpenInit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd16(out *jwriter.Writer, in IBCOpenInit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		(in.Channel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCOpenInit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCOpenInit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCOpenInit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCOpenInit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd16(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd17(in *jlexer.Lexer, out *IBCOpenConfirm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd17(out *jwriter.Writer, in IBCOpenConfirm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		(in.Channel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCOpenConfirm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCOpenConfirm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCOpenConfirm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCOpenConfirm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd17(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd18(in *jlexer.Lexer, out *IBCOpenAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		case "counterparty_version":
			out.CounterpartyVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd18(out *jwriter.Writer, in IBCOpenAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		(in.Channel).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"counterparty_version\":"
		out.RawString(prefix)
		out.String(string(in.CounterpartyVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCOpenAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCOpenAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCOpenAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCOpenAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd18(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd19(in *jlexer.Lexer, out *IBCMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transfer":
			if in.IsNull() {
				in.Skip()
				out.Transfer = nil
			} else {
				if out.Transfer == nil {
					out.Transfer = new(TransferMsg)
				}
				(*out.Transfer).UnmarshalEasyJSON(in)
			}
		case "send_packet":
			if in.IsNull() {
				in.Skip()
				out.SendPacket = nil
			} else {
				if out.SendPacket == nil {
					out.SendPacket = new(SendPacketMsg)
				}
				(*out.SendPacket).UnmarshalEasyJSON(in)
			}
		case "close_channel":
			if in.IsNull() {
				in.Skip()
				out.CloseChannel = nil
			} else {
				if out.CloseChannel == nil {
					out.CloseChannel = new(CloseChannelMsg)
				}
				(*out.CloseChannel).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd19(out *jwriter.Writer, in IBCMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Transfer != nil {
		const prefix string = ",\"transfer\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Transfer).MarshalEasyJSON(out)
	}
	if in.SendPacket != nil {
		const prefix string = ",\"send_packet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SendPacket).MarshalEasyJSON(out)
	}
	if in.CloseChannel != nil {
		const prefix string = ",\"close_channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CloseChannel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd19(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd20(in *jlexer.Lexer, out *IBCEndpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port_id":
			out.PortID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd20(out *jwriter.Writer, in IBCEndpoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"port_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PortID))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCEndpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCEndpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCEndpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCEndpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd20(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd21(in *jlexer.Lexer, out *IBCCloseInit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd21(out *jwriter.Writer, in IBCCloseInit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		(in.Channel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCCloseInit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCCloseInit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCCloseInit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCCloseInit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd21(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd22(in *jlexer.Lexer, out *IBCCloseConfirm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd22(out *jwriter.Writer, in IBCCloseConfirm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		(in.Channel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCCloseConfirm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCCloseConfirm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCCloseConfirm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCCloseConfirm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd22(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd23(in *jlexer.Lexer, out *IBCChannelOpenResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(struct{})
				}
				easyjson9cde75eaDecode(in, out.Ok)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd23(out *jwriter.Writer, in IBCChannelOpenResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		easyjson9cde75eaEncode(out, *in.Ok)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCChannelOpenResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCChannelOpenResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCChannelOpenResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCChannelOpenResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd23(l, v)
}
func easyjson9cde75eaDecode(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncode(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd24(in *jlexer.Lexer, out *IBCChannelOpenMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "open_init":
			if in.IsNull() {
				in.Skip()
				out.OpenInit = nil
			} else {
				if out.OpenInit == nil {
					out.OpenInit = new(IBCOpenInit)
				}
				(*out.OpenInit).UnmarshalEasyJSON(in)
			}
		case "open_try":
			if in.IsNull() {
				in.Skip()
				out.OpenTry = nil
			} else {
				if out.OpenTry == nil {
					out.OpenTry = new(IBCOpenTry)
				}
				(*out.OpenTry).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd24(out *jwriter.Writer, in IBCChannelOpenMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OpenInit != nil {
		const prefix string = ",\"open_init\":"
		first = false
		out.RawString(prefix[1:])
		(*in.OpenInit).MarshalEasyJSON(out)
	}
	if in.OpenTry != nil {
		const prefix string = ",\"open_try\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OpenTry).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCChannelOpenMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCChannelOpenMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCChannelOpenMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCChannelOpenMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd24(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd25(in *jlexer.Lexer, out *IBCChannelConnectMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "open_ack":
			if in.IsNull() {
				in.Skip()
				out.OpenAck = nil
			} else {
				if out.OpenAck == nil {
					out.OpenAck = new(IBCOpenAck)
				}
				(*out.OpenAck).UnmarshalEasyJSON(in)
			}
		case "open_confirm":
			if in.IsNull() {
				in.Skip()
				out.OpenConfirm = nil
			} else {
				if out.OpenConfirm == nil {
					out.OpenConfirm = new(IBCOpenConfirm)
				}
				(*out.OpenConfirm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd25(out *jwriter.Writer, in IBCChannelConnectMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OpenAck != nil {
		const prefix string = ",\"open_ack\":"
		first = false
		out.RawString(prefix[1:])
		(*in.OpenAck).MarshalEasyJSON(out)
	}
	if in.OpenConfirm != nil {
		const prefix string = ",\"open_confirm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OpenConfirm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCChannelConnectMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCChannelConnectMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCChannelConnectMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCChannelConnectMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd25(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd26(in *jlexer.Lexer, out *IBCChannelCloseMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "close_init":
			if in.IsNull() {
				in.Skip()
				out.CloseInit = nil
			} else {
				if out.CloseInit == nil {
					out.CloseInit = new(IBCCloseInit)
				}
				(*out.CloseInit).UnmarshalEasyJSON(in)
			}
		case "close_confirm":
			if in.IsNull() {
				in.Skip()
				out.CloseConfirm = nil
			} else {
				if out.CloseConfirm == nil {
					out.CloseConfirm = new(IBCCloseConfirm)
				}
				(*out.CloseConfirm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd26(out *jwriter.Writer, in IBCChannelCloseMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CloseInit != nil {
		const prefix string = ",\"close_init\":"
		first = false
		out.RawString(prefix[1:])
		(*in.CloseInit).MarshalEasyJSON(out)
	}
	if in.CloseConfirm != nil {
		const prefix string = ",\"close_confirm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CloseConfirm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCChannelCloseMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCChannelCloseMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCChannelCloseMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCChannelCloseMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd26(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd27(in *jlexer.Lexer, out *IBCChannel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoint":
			(out.Endpoint).UnmarshalEasyJSON(in)
		case "counterparty_endpoint":
			(out.CounterpartyEndpoint).UnmarshalEasyJSON(in)
		case "order":
			out.Order = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "connection_id":
			out.ConnectionID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd27(out *jwriter.Writer, in IBCChannel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix[1:])
		(in.Endpoint).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"counterparty_endpoint\":"
		out.RawString(prefix)
		(in.CounterpartyEndpoint).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.String(string(in.Order))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"connection_id\":"
		out.RawString(prefix)
		out.String(string(in.ConnectionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCChannel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCChannel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCChannel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCChannel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd27(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd28(in *jlexer.Lexer, out *IBCBasicResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(IBCBasicResponse)
				}
				(*out.Ok).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd28(out *jwriter.Writer, in IBCBasicResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalEasyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCBasicResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCBasicResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCBasicResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCBasicResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd28(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd29(in *jlexer.Lexer, out *IBCBasicResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]SubMsg, 0, 0)
					} else {
						out.Messages = []SubMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v22 SubMsg
					(v22).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v23 EventAttribute
					(v23).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 1)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Event
					(v24).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd29(out *jwriter.Writer, in IBCBasicResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Messages {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Attributes {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Events {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCBasicResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCBasicResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCBasicResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCBasicResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd29(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd30(in *jlexer.Lexer, out *IBCAcknowledgement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd30(out *jwriter.Writer, in IBCAcknowledgement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IBCAcknowledgement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IBCAcknowledgement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IBCAcknowledgement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IBCAcknowledgement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd30(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd31(in *jlexer.Lexer, out *CloseChannelMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd31(out *jwriter.Writer, in CloseChannelMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChannelID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CloseChannelMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CloseChannelMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CloseChannelMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CloseChannelMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd31(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd32(in *jlexer.Lexer, out *ChannelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(IBCChannel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd32(out *jwriter.Writer, in ChannelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Channel).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd32(l, v)
}
func easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd33(in *jlexer.Lexer, out *ChannelQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port_id":
			out.PortID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd33(out *jwriter.Writer, in ChannelQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PortID != "" {
		const prefix string = ",\"port_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PortID))
	}
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChannelID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cde75eaEncodeGithubComCosmwasmCosmwasmGoStd33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cde75eaDecodeGithubComCosmwasmCosmwasmGoStd33(l, v)
}
