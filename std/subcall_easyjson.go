// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *SubcallResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(SubcallResponse)
				}
				(*out.Ok).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in SubcallResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != nil {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Ok).MarshalEasyJSON(out)
	}
	if in.Err != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubcallResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubcallResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubcallResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubcallResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *SubcallResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 1)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Event
					(v1).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in SubcallResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.Events {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubcallResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubcallResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubcallResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubcallResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *SubMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "msg":
			(out.Msg).UnmarshalEasyJSON(in)
		case "gas_limit":
			if in.IsNull() {
				in.Skip()
				out.GasLimit = nil
			} else {
				if out.GasLimit == nil {
					out.GasLimit = new(uint64)
				}
				*out.GasLimit = uint64(in.Uint64())
			}
		case "reply_on":
			out.ReplyOn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in SubMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		(in.Msg).MarshalEasyJSON(out)
	}
	if in.GasLimit != nil {
		const prefix string = ",\"gas_limit\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.GasLimit))
	}
	{
		const prefix string = ",\"reply_on\":"
		out.RawString(prefix)
		out.String(string(in.ReplyOn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *Reply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in Reply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]EventAttribute, 0, 2)
					} else {
						out.Attributes = []EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 EventAttribute
					(v7).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Attributes {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7a56a8cEncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7a56a8cDecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
