// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *WasmQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "smart":
			if in.IsNull() {
				in.Skip()
				out.Smart = nil
			} else {
				if out.Smart == nil {
					out.Smart = new(SmartQuery)
				}
				(*out.Smart).UnmarshalEasyJSON(in)
			}
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				if out.Raw == nil {
					out.Raw = new(RawQuery)
				}
				(*out.Raw).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in WasmQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Smart != nil {
		const prefix string = ",\"smart\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Smart).MarshalEasyJSON(out)
	}
	if in.Raw != nil {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Raw).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WasmQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WasmQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WasmQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WasmQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *ValidatorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validators":
			if in.IsNull() {
				in.Skip()
				out.Validators = nil
			} else {
				in.Delim('[')
				if out.Validators == nil {
					if !in.IsDelim(']') {
						out.Validators = make([]Validator, 0, 1)
					} else {
						out.Validators = []Validator{}
					}
				} else {
					out.Validators = (out.Validators)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Validator
					(v1).UnmarshalEasyJSON(in)
					out.Validators = append(out.Validators, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in ValidatorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validators\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Validators {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValidatorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValidatorsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValidatorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValidatorsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *Validator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "commission":
			out.Commission = string(in.String())
		case "max_commission":
			out.MaxCommission = string(in.String())
		case "max_change_rate":
			out.MaxChangeRate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in Validator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"max_commission\":"
		out.RawString(prefix)
		out.String(string(in.MaxCommission))
	}
	{
		const prefix string = ",\"max_change_rate\":"
		out.RawString(prefix)
		out.String(string(in.MaxChangeRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Validator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Validator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Validator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Validator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *StakingQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validators":
			if in.IsNull() {
				in.Skip()
				out.Validators = nil
			} else {
				if out.Validators == nil {
					out.Validators = new(struct{})
				}
				easyjson90b16446Decode(in, out.Validators)
			}
		case "all_delegations":
			if in.IsNull() {
				in.Skip()
				out.AllDelegations = nil
			} else {
				if out.AllDelegations == nil {
					out.AllDelegations = new(AllDelegationsQuery)
				}
				(*out.AllDelegations).UnmarshalEasyJSON(in)
			}
		case "delegation":
			if in.IsNull() {
				in.Skip()
				out.Delegation = nil
			} else {
				if out.Delegation == nil {
					out.Delegation = new(DelegationQuery)
				}
				(*out.Delegation).UnmarshalEasyJSON(in)
			}
		case "bonded_denom":
			if in.IsNull() {
				in.Skip()
				out.BondedDenom = nil
			} else {
				if out.BondedDenom == nil {
					out.BondedDenom = new(struct{})
				}
				easyjson90b16446Decode(in, out.BondedDenom)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in StakingQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Validators != nil {
		const prefix string = ",\"validators\":"
		first = false
		out.RawString(prefix[1:])
		easyjson90b16446Encode(out, *in.Validators)
	}
	if in.AllDelegations != nil {
		const prefix string = ",\"all_delegations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AllDelegations).MarshalEasyJSON(out)
	}
	if in.Delegation != nil {
		const prefix string = ",\"delegation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Delegation).MarshalEasyJSON(out)
	}
	if in.BondedDenom != nil {
		const prefix string = ",\"bonded_denom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson90b16446Encode(out, *in.BondedDenom)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func easyjson90b16446Decode(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446Encode(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *SmartQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in SmartQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmartQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmartQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmartQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmartQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd5(in *jlexer.Lexer, out *RawQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd5(out *jwriter.Writer, in RawQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd5(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd6(in *jlexer.Lexer, out *QueryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Ok = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd6(out *jwriter.Writer, in QueryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok != "" {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Ok))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd6(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd7(in *jlexer.Lexer, out *QueryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank":
			if in.IsNull() {
				in.Skip()
				out.Bank = nil
			} else {
				if out.Bank == nil {
					out.Bank = new(BankQuery)
				}
				(*out.Bank).UnmarshalEasyJSON(in)
			}
		case "custom":
			if in.IsNull() {
				in.Skip()
				out.Custom = nil
			} else {
				if out.Custom == nil {
					out.Custom = new(RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Custom).UnmarshalJSON(data))
				}
			}
		case "staking":
			if in.IsNull() {
				in.Skip()
				out.Staking = nil
			} else {
				if out.Staking == nil {
					out.Staking = new(StakingQuery)
				}
				(*out.Staking).UnmarshalEasyJSON(in)
			}
		case "wasm":
			if in.IsNull() {
				in.Skip()
				out.Wasm = nil
			} else {
				if out.Wasm == nil {
					out.Wasm = new(WasmQuery)
				}
				(*out.Wasm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd7(out *jwriter.Writer, in QueryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bank != nil {
		const prefix string = ",\"bank\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Bank).MarshalEasyJSON(out)
	}
	if in.Custom != nil {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Custom).MarshalJSON())
	}
	if in.Staking != nil {
		const prefix string = ",\"staking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Staking).MarshalEasyJSON(out)
	}
	if in.Wasm != nil {
		const prefix string = ",\"wasm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Wasm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd7(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd8(in *jlexer.Lexer, out *QuerierWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd8(out *jwriter.Writer, in QuerierWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuerierWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuerierWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuerierWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuerierWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd8(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd9(in *jlexer.Lexer, out *QuerierResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			(out.Ok).UnmarshalEasyJSON(in)
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd9(out *jwriter.Writer, in QuerierResult) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		(in.Ok).MarshalEasyJSON(out)
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuerierResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuerierResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuerierResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuerierResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd9(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd10(in *jlexer.Lexer, out *FullDelegation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "accumulated_rewards":
			if in.IsNull() {
				in.Skip()
				out.AccumulatedRewards = nil
			} else {
				in.Delim('[')
				if out.AccumulatedRewards == nil {
					if !in.IsDelim(']') {
						out.AccumulatedRewards = make([]Coin, 0, 2)
					} else {
						out.AccumulatedRewards = []Coin{}
					}
				} else {
					out.AccumulatedRewards = (out.AccumulatedRewards)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Coin
					(v10).UnmarshalEasyJSON(in)
					out.AccumulatedRewards = append(out.AccumulatedRewards, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_redelegate":
			(out.CanRedelegate).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd10(out *jwriter.Writer, in FullDelegation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"accumulated_rewards\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.AccumulatedRewards {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_redelegate\":"
		out.RawString(prefix)
		(in.CanRedelegate).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FullDelegation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FullDelegation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FullDelegation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FullDelegation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd10(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd11(in *jlexer.Lexer, out *DelegationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegation":
			if in.IsNull() {
				in.Skip()
				out.Delegation = nil
			} else {
				if out.Delegation == nil {
					out.Delegation = new(FullDelegation)
				}
				(*out.Delegation).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd11(out *jwriter.Writer, in DelegationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delegation != nil {
		const prefix string = ",\"delegation\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Delegation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DelegationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DelegationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd11(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd12(in *jlexer.Lexer, out *DelegationQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd12(out *jwriter.Writer, in DelegationQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegationQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DelegationQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegationQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DelegationQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd12(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd13(in *jlexer.Lexer, out *Delegation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd13(out *jwriter.Writer, in Delegation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Delegation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Delegation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Delegation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Delegation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd13(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd14(in *jlexer.Lexer, out *BondedDenomResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "denom":
			out.Denom = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd14(out *jwriter.Writer, in BondedDenomResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"denom\":"
		out.RawString(prefix[1:])
		out.String(string(in.Denom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BondedDenomResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BondedDenomResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BondedDenomResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BondedDenomResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd14(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd15(in *jlexer.Lexer, out *BankQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			if in.IsNull() {
				in.Skip()
				out.Balance = nil
			} else {
				if out.Balance == nil {
					out.Balance = new(BalanceQuery)
				}
				(*out.Balance).UnmarshalEasyJSON(in)
			}
		case "all_balances":
			if in.IsNull() {
				in.Skip()
				out.AllBalances = nil
			} else {
				if out.AllBalances == nil {
					out.AllBalances = new(AllBalancesQuery)
				}
				(*out.AllBalances).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd15(out *jwriter.Writer, in BankQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Balance != nil {
		const prefix string = ",\"balance\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Balance).MarshalEasyJSON(out)
	}
	if in.AllBalances != nil {
		const prefix string = ",\"all_balances\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AllBalances).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd15(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd16(in *jlexer.Lexer, out *BalanceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd16(out *jwriter.Writer, in BalanceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd16(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd17(in *jlexer.Lexer, out *BalanceQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "denom":
			out.Denom = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd17(out *jwriter.Writer, in BalanceQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"denom\":"
		out.RawString(prefix)
		out.String(string(in.Denom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd17(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd18(in *jlexer.Lexer, out *AllDelegationsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegations":
			if in.IsNull() {
				in.Skip()
				out.Delegations = nil
			} else {
				in.Delim('[')
				if out.Delegations == nil {
					if !in.IsDelim(']') {
						out.Delegations = make([]Delegation, 0, 1)
					} else {
						out.Delegations = []Delegation{}
					}
				} else {
					out.Delegations = (out.Delegations)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Delegation
					(v13).UnmarshalEasyJSON(in)
					out.Delegations = append(out.Delegations, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd18(out *jwriter.Writer, in AllDelegationsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegations\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.Delegations {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllDelegationsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllDelegationsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllDelegationsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllDelegationsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd18(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd19(in *jlexer.Lexer, out *AllDelegationsQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegator":
			out.Delegator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd19(out *jwriter.Writer, in AllDelegationsQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllDelegationsQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllDelegationsQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllDelegationsQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllDelegationsQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd19(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd20(in *jlexer.Lexer, out *AllBalancesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				in.Delim('[')
				if out.Amount == nil {
					if !in.IsDelim(']') {
						out.Amount = make([]Coin, 0, 2)
					} else {
						out.Amount = []Coin{}
					}
				} else {
					out.Amount = (out.Amount)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Coin
					(v16).UnmarshalEasyJSON(in)
					out.Amount = append(out.Amount, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd20(out *jwriter.Writer, in AllBalancesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v17, v18 := range in.Amount {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllBalancesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllBalancesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllBalancesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllBalancesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd20(l, v)
}
func easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd21(in *jlexer.Lexer, out *AllBalancesQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd21(out *jwriter.Writer, in AllBalancesQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllBalancesQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllBalancesQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComCosmwasmCosmwasmGoStd21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllBalancesQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllBalancesQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComCosmwasmCosmwasmGoStd21(l, v)
}
