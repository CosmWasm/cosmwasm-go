// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *WithdrawMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in WithdrawMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	if in.Recipient != "" {
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *WasmMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execute":
			if in.IsNull() {
				in.Skip()
				out.Execute = nil
			} else {
				if out.Execute == nil {
					out.Execute = new(ExecuteMsg)
				}
				(*out.Execute).UnmarshalEasyJSON(in)
			}
		case "instantiate":
			if in.IsNull() {
				in.Skip()
				out.Instantiate = nil
			} else {
				if out.Instantiate == nil {
					out.Instantiate = new(InstantiateMsg)
				}
				(*out.Instantiate).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in WasmMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Execute != nil {
		const prefix string = ",\"execute\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Execute).MarshalEasyJSON(out)
	}
	if in.Instantiate != nil {
		const prefix string = ",\"instantiate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Instantiate).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WasmMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WasmMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WasmMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WasmMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *UndelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in UndelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UndelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UndelegateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UndelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UndelegateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *StakingMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegate":
			if in.IsNull() {
				in.Skip()
				out.Delegate = nil
			} else {
				if out.Delegate == nil {
					out.Delegate = new(DelegateMsg)
				}
				(*out.Delegate).UnmarshalEasyJSON(in)
			}
		case "undelegate":
			if in.IsNull() {
				in.Skip()
				out.Undelegate = nil
			} else {
				if out.Undelegate == nil {
					out.Undelegate = new(UndelegateMsg)
				}
				(*out.Undelegate).UnmarshalEasyJSON(in)
			}
		case "redelegate":
			if in.IsNull() {
				in.Skip()
				out.Redelegate = nil
			} else {
				if out.Redelegate == nil {
					out.Redelegate = new(RedelegateMsg)
				}
				(*out.Redelegate).UnmarshalEasyJSON(in)
			}
		case "withdraw":
			if in.IsNull() {
				in.Skip()
				out.Withdraw = nil
			} else {
				if out.Withdraw == nil {
					out.Withdraw = new(WithdrawMsg)
				}
				(*out.Withdraw).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in StakingMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delegate != nil {
		const prefix string = ",\"delegate\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Delegate).MarshalEasyJSON(out)
	}
	if in.Undelegate != nil {
		const prefix string = ",\"undelegate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Undelegate).MarshalEasyJSON(out)
	}
	if in.Redelegate != nil {
		const prefix string = ",\"redelegate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Redelegate).MarshalEasyJSON(out)
	}
	if in.Withdraw != nil {
		const prefix string = ",\"withdraw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Withdraw).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *SendMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from_address":
			out.FromAddress = string(in.String())
		case "to_address":
			out.ToAddress = string(in.String())
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				in.Delim('[')
				if out.Amount == nil {
					if !in.IsDelim(']') {
						out.Amount = make([]Coin, 0, 2)
					} else {
						out.Amount = []Coin{}
					}
				} else {
					out.Amount = (out.Amount)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Coin
					(v1).UnmarshalEasyJSON(in)
					out.Amount = append(out.Amount, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in SendMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from_address\":"
		out.RawString(prefix[1:])
		out.String(string(in.FromAddress))
	}
	{
		const prefix string = ",\"to_address\":"
		out.RawString(prefix)
		out.String(string(in.ToAddress))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Amount {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd5(in *jlexer.Lexer, out *RedelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "src_validator":
			out.SrcValidator = string(in.String())
		case "dst_validator":
			out.DstValidator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd5(out *jwriter.Writer, in RedelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"src_validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.SrcValidator))
	}
	{
		const prefix string = ",\"dst_validator\":"
		out.RawString(prefix)
		out.String(string(in.DstValidator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedelegateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedelegateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd5(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd6(in *jlexer.Lexer, out *OptionBinary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "none":
			out.None = string(in.String())
		case "some":
			if in.IsNull() {
				in.Skip()
				out.Some = nil
			} else {
				out.Some = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd6(out *jwriter.Writer, in OptionBinary) {
	out.RawByte('{')
	first := true
	_ = first
	if in.None != "" {
		const prefix string = ",\"none\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.None))
	}
	if len(in.Some) != 0 {
		const prefix string = ",\"some\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Some)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OptionBinary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OptionBinary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OptionBinary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OptionBinary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd6(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd7(in *jlexer.Lexer, out *MigrateResultOk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			(out.Ok).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd7(out *jwriter.Writer, in MigrateResultOk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		(in.Ok).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateResultOk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MigrateResultOk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateResultOk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MigrateResultOk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd7(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd8(in *jlexer.Lexer, out *MigrateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]CosmosMsg, 0, 2)
					} else {
						out.Messages = []CosmosMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v7 CosmosMsg
					(v7).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]Attribute, 0, 2)
					} else {
						out.Attributes = []Attribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Attribute
					(v8).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd8(out *jwriter.Writer, in MigrateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v9, v10 := range in.Messages {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Attributes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MigrateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MigrateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd8(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd9(in *jlexer.Lexer, out *InstantiateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code_id":
			out.CodeID = uint64(in.Uint64())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				in.Delim('[')
				if out.Send == nil {
					if !in.IsDelim(']') {
						out.Send = make([]Coin, 0, 2)
					} else {
						out.Send = []Coin{}
					}
				} else {
					out.Send = (out.Send)[:0]
				}
				for !in.IsDelim(']') {
					var v14 Coin
					(v14).UnmarshalEasyJSON(in)
					out.Send = append(out.Send, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd9(out *jwriter.Writer, in InstantiateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.CodeID))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	{
		const prefix string = ",\"send\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Send {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstantiateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstantiateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd9(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd10(in *jlexer.Lexer, out *InitResultOk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			(out.Ok).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd10(out *jwriter.Writer, in InitResultOk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		(in.Ok).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitResultOk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitResultOk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitResultOk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitResultOk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd10(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd11(in *jlexer.Lexer, out *InitResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]CosmosMsg, 0, 2)
					} else {
						out.Messages = []CosmosMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v19 CosmosMsg
					(v19).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]Attribute, 0, 2)
					} else {
						out.Attributes = []Attribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Attribute
					(v20).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd11(out *jwriter.Writer, in InitResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v21, v22 := range in.Messages {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Attributes {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd11(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd12(in *jlexer.Lexer, out *HandleResultOk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			(out.Ok).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd12(out *jwriter.Writer, in HandleResultOk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		(in.Ok).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HandleResultOk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HandleResultOk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HandleResultOk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HandleResultOk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd12(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd13(in *jlexer.Lexer, out *HandleResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]CosmosMsg, 0, 2)
					} else {
						out.Messages = []CosmosMsg{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v25 CosmosMsg
					(v25).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]Attribute, 0, 2)
					} else {
						out.Attributes = []Attribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v26 Attribute
					(v26).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd13(out *jwriter.Writer, in HandleResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v27, v28 := range in.Messages {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v29, v30 := range in.Attributes {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HandleResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HandleResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HandleResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HandleResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd13(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd14(in *jlexer.Lexer, out *ExecuteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_addr":
			out.ContractAddr = string(in.String())
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				out.Msg = in.Bytes()
			}
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				in.Delim('[')
				if out.Send == nil {
					if !in.IsDelim(']') {
						out.Send = make([]Coin, 0, 2)
					} else {
						out.Send = []Coin{}
					}
				} else {
					out.Send = (out.Send)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Coin
					(v32).UnmarshalEasyJSON(in)
					out.Send = append(out.Send, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd14(out *jwriter.Writer, in ExecuteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractAddr))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Msg)
	}
	{
		const prefix string = ",\"send\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v35, v36 := range in.Send {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecuteMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd14(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd15(in *jlexer.Lexer, out *DelegateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd15(out *jwriter.Writer, in DelegateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelegateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DelegateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelegateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DelegateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd15(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd16(in *jlexer.Lexer, out *CosmosResponseError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "err":
			(out.Err).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd16(out *jwriter.Writer, in CosmosResponseError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"err\":"
		out.RawString(prefix[1:])
		(in.Err).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CosmosResponseError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CosmosResponseError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CosmosResponseError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CosmosResponseError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd16(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd17(in *jlexer.Lexer, out *CosmosMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank":
			if in.IsNull() {
				in.Skip()
				out.Bank = nil
			} else {
				if out.Bank == nil {
					out.Bank = new(BankMsg)
				}
				(*out.Bank).UnmarshalEasyJSON(in)
			}
		case "custom":
			if in.IsNull() {
				in.Skip()
				out.Custom = nil
			} else {
				if out.Custom == nil {
					out.Custom = new(RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Custom).UnmarshalJSON(data))
				}
			}
		case "staking":
			if in.IsNull() {
				in.Skip()
				out.Staking = nil
			} else {
				if out.Staking == nil {
					out.Staking = new(StakingMsg)
				}
				(*out.Staking).UnmarshalEasyJSON(in)
			}
		case "wasm":
			if in.IsNull() {
				in.Skip()
				out.Wasm = nil
			} else {
				if out.Wasm == nil {
					out.Wasm = new(WasmMsg)
				}
				(*out.Wasm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd17(out *jwriter.Writer, in CosmosMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bank != nil {
		const prefix string = ",\"bank\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Bank).MarshalEasyJSON(out)
	}
	if in.Custom != nil {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Custom).MarshalJSON())
	}
	if in.Staking != nil {
		const prefix string = ",\"staking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Staking).MarshalEasyJSON(out)
	}
	if in.Wasm != nil {
		const prefix string = ",\"wasm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Wasm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CosmosMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CosmosMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CosmosMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CosmosMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd17(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd18(in *jlexer.Lexer, out *Coin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "denom":
			out.Denom = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd18(out *jwriter.Writer, in Coin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"denom\":"
		out.RawString(prefix[1:])
		out.String(string(in.Denom))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd18(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd19(in *jlexer.Lexer, out *BankMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				if out.Send == nil {
					out.Send = new(SendMsg)
				}
				(*out.Send).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd19(out *jwriter.Writer, in BankMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Send != nil {
		const prefix string = ",\"send\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Send).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd19(l, v)
}
func easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd20(in *jlexer.Lexer, out *Attribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd20(out *jwriter.Writer, in Attribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attribute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attribute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComCosmwasmCosmwasmGoStd20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attribute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attribute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComCosmwasmCosmwasmGoStd20(l, v)
}
