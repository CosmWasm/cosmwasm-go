// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *Underflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minuend":
			out.Minuend = string(in.String())
		case "subtrahend":
			out.Subtrahend = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in Underflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minuend\":"
		out.RawString(prefix[1:])
		out.String(string(in.Minuend))
	}
	{
		const prefix string = ",\"subtrahend\":"
		out.RawString(prefix)
		out.String(string(in.Subtrahend))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Underflow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Underflow) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Underflow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Underflow) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *Unauthorized) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in Unauthorized) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unauthorized) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Unauthorized) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unauthorized) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Unauthorized) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *StdError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "generic_err":
			if in.IsNull() {
				in.Skip()
				out.GenericErr = nil
			} else {
				if out.GenericErr == nil {
					out.GenericErr = new(GenericErr)
				}
				(*out.GenericErr).UnmarshalTinyJSON(in)
			}
		case "invalid_base64":
			if in.IsNull() {
				in.Skip()
				out.InvalidBase64 = nil
			} else {
				if out.InvalidBase64 == nil {
					out.InvalidBase64 = new(InvalidBase64)
				}
				(*out.InvalidBase64).UnmarshalTinyJSON(in)
			}
		case "invalid_utf8":
			if in.IsNull() {
				in.Skip()
				out.InvalidUtf8 = nil
			} else {
				if out.InvalidUtf8 == nil {
					out.InvalidUtf8 = new(InvalidUtf8)
				}
				(*out.InvalidUtf8).UnmarshalTinyJSON(in)
			}
		case "not_found":
			if in.IsNull() {
				in.Skip()
				out.NotFound = nil
			} else {
				if out.NotFound == nil {
					out.NotFound = new(NotFound)
				}
				(*out.NotFound).UnmarshalTinyJSON(in)
			}
		case "null_pointer":
			if in.IsNull() {
				in.Skip()
				out.NullPointer = nil
			} else {
				if out.NullPointer == nil {
					out.NullPointer = new(NullPointer)
				}
				(*out.NullPointer).UnmarshalTinyJSON(in)
			}
		case "parse_err":
			if in.IsNull() {
				in.Skip()
				out.ParseErr = nil
			} else {
				if out.ParseErr == nil {
					out.ParseErr = new(ParseErr)
				}
				(*out.ParseErr).UnmarshalTinyJSON(in)
			}
		case "serialize_err":
			if in.IsNull() {
				in.Skip()
				out.SerializeErr = nil
			} else {
				if out.SerializeErr == nil {
					out.SerializeErr = new(SerializeErr)
				}
				(*out.SerializeErr).UnmarshalTinyJSON(in)
			}
		case "unauthorized":
			if in.IsNull() {
				in.Skip()
				out.Unauthorized = nil
			} else {
				if out.Unauthorized == nil {
					out.Unauthorized = new(Unauthorized)
				}
				(*out.Unauthorized).UnmarshalTinyJSON(in)
			}
		case "underflow":
			if in.IsNull() {
				in.Skip()
				out.Underflow = nil
			} else {
				if out.Underflow == nil {
					out.Underflow = new(Underflow)
				}
				(*out.Underflow).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in StdError) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GenericErr != nil {
		const prefix string = ",\"generic_err\":"
		first = false
		out.RawString(prefix[1:])
		(*in.GenericErr).MarshalTinyJSON(out)
	}
	if in.InvalidBase64 != nil {
		const prefix string = ",\"invalid_base64\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InvalidBase64).MarshalTinyJSON(out)
	}
	if in.InvalidUtf8 != nil {
		const prefix string = ",\"invalid_utf8\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InvalidUtf8).MarshalTinyJSON(out)
	}
	if in.NotFound != nil {
		const prefix string = ",\"not_found\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NotFound).MarshalTinyJSON(out)
	}
	if in.NullPointer != nil {
		const prefix string = ",\"null_pointer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NullPointer).MarshalTinyJSON(out)
	}
	if in.ParseErr != nil {
		const prefix string = ",\"parse_err\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ParseErr).MarshalTinyJSON(out)
	}
	if in.SerializeErr != nil {
		const prefix string = ",\"serialize_err\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SerializeErr).MarshalTinyJSON(out)
	}
	if in.Unauthorized != nil {
		const prefix string = ",\"unauthorized\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Unauthorized).MarshalTinyJSON(out)
	}
	if in.Underflow != nil {
		const prefix string = ",\"underflow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Underflow).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StdError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v StdError) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StdError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *StdError) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *SerializeErr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in SerializeErr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerializeErr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v SerializeErr) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerializeErr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *SerializeErr) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *ParseErr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in ParseErr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix[1:])
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParseErr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ParseErr) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParseErr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ParseErr) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd5(in *jlexer.Lexer, out *NullPointer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd5(out *jwriter.Writer, in NullPointer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NullPointer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v NullPointer) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NullPointer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *NullPointer) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd5(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd6(in *jlexer.Lexer, out *NotFound) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd6(out *jwriter.Writer, in NotFound) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotFound) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v NotFound) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotFound) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *NotFound) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd6(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd7(in *jlexer.Lexer, out *InvalidUtf8) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd7(out *jwriter.Writer, in InvalidUtf8) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvalidUtf8) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InvalidUtf8) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvalidUtf8) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InvalidUtf8) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd7(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd8(in *jlexer.Lexer, out *InvalidBase64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd8(out *jwriter.Writer, in InvalidBase64) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvalidBase64) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InvalidBase64) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvalidBase64) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InvalidBase64) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd8(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd9(in *jlexer.Lexer, out *GenericErr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd9(out *jwriter.Writer, in GenericErr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenericErr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v GenericErr) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenericErr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *GenericErr) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd9(l, v)
}
func tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd10(in *jlexer.Lexer, out *ContractError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd10(out *jwriter.Writer, in ContractError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ContractError) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson631e4b7dEncodeGithubComCosmwasmCosmwasmGoStd10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ContractError) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson631e4b7dDecodeGithubComCosmwasmCosmwasmGoStd10(l, v)
}
