// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd(in *jlexer.Lexer, out *UnsupportedRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd(out *jwriter.Writer, in UnsupportedRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnsupportedRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UnsupportedRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnsupportedRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UnsupportedRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd(l, v)
}
func tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd1(in *jlexer.Lexer, out *Unknown) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd1(out *jwriter.Writer, in Unknown) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unknown) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Unknown) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unknown) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Unknown) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd1(l, v)
}
func tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd2(in *jlexer.Lexer, out *SystemError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "invalid_request":
			if in.IsNull() {
				in.Skip()
				out.InvalidRequest = nil
			} else {
				if out.InvalidRequest == nil {
					out.InvalidRequest = new(InvalidRequest)
				}
				(*out.InvalidRequest).UnmarshalTinyJSON(in)
			}
		case "invalid_response":
			if in.IsNull() {
				in.Skip()
				out.InvalidResponse = nil
			} else {
				if out.InvalidResponse == nil {
					out.InvalidResponse = new(InvalidResponse)
				}
				(*out.InvalidResponse).UnmarshalTinyJSON(in)
			}
		case "no_such_contract":
			if in.IsNull() {
				in.Skip()
				out.NoSuchContract = nil
			} else {
				if out.NoSuchContract == nil {
					out.NoSuchContract = new(NoSuchContract)
				}
				(*out.NoSuchContract).UnmarshalTinyJSON(in)
			}
		case "unknown":
			if in.IsNull() {
				in.Skip()
				out.Unknown = nil
			} else {
				if out.Unknown == nil {
					out.Unknown = new(Unknown)
				}
				(*out.Unknown).UnmarshalTinyJSON(in)
			}
		case "unsupported_request":
			if in.IsNull() {
				in.Skip()
				out.UnsupportedRequest = nil
			} else {
				if out.UnsupportedRequest == nil {
					out.UnsupportedRequest = new(UnsupportedRequest)
				}
				(*out.UnsupportedRequest).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd2(out *jwriter.Writer, in SystemError) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InvalidRequest != nil {
		const prefix string = ",\"invalid_request\":"
		first = false
		out.RawString(prefix[1:])
		(*in.InvalidRequest).MarshalTinyJSON(out)
	}
	if in.InvalidResponse != nil {
		const prefix string = ",\"invalid_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InvalidResponse).MarshalTinyJSON(out)
	}
	if in.NoSuchContract != nil {
		const prefix string = ",\"no_such_contract\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NoSuchContract).MarshalTinyJSON(out)
	}
	if in.Unknown != nil {
		const prefix string = ",\"unknown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Unknown).MarshalTinyJSON(out)
	}
	if in.UnsupportedRequest != nil {
		const prefix string = ",\"unsupported_request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UnsupportedRequest).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v SystemError) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *SystemError) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd2(l, v)
}
func tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd3(in *jlexer.Lexer, out *NoSuchContract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr":
			out.Addr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd3(out *jwriter.Writer, in NoSuchContract) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Addr != "" {
		const prefix string = ",\"addr\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Addr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NoSuchContract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v NoSuchContract) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NoSuchContract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *NoSuchContract) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd3(l, v)
}
func tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd4(in *jlexer.Lexer, out *InvalidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Err = string(in.String())
		case "response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				out.Response = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd4(out *jwriter.Writer, in InvalidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Err))
	}
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Response)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvalidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InvalidResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvalidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InvalidResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd4(l, v)
}
func tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd5(in *jlexer.Lexer, out *InvalidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Err = string(in.String())
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				out.Request = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd5(out *jwriter.Writer, in InvalidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Err))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Request)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvalidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InvalidRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonEc3475f9EncodeGithubComCosmwasmCosmwasmGoStd5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvalidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InvalidRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonEc3475f9DecodeGithubComCosmwasmCosmwasmGoStd5(l, v)
}
