// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package src

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc(in *jlexer.Lexer, out *QueryMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(struct{})
				}
				tinyjson954708aaDecode(in, out.Count)
			}
		case "sum":
			if in.IsNull() {
				in.Skip()
				out.Sum = nil
			} else {
				if out.Sum == nil {
					out.Sum = new(struct{})
				}
				tinyjson954708aaDecode(in, out.Sum)
			}
		case "reducer":
			if in.IsNull() {
				in.Skip()
				out.Reducer = nil
			} else {
				if out.Reducer == nil {
					out.Reducer = new(struct{})
				}
				tinyjson954708aaDecode(in, out.Reducer)
			}
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				if out.List == nil {
					out.List = new(struct{})
				}
				tinyjson954708aaDecode(in, out.List)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc(out *jwriter.Writer, in QueryMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		if in.Count == nil {
			out.RawString("null")
		} else {
			tinyjson954708aaEncode(out, *in.Count)
		}
	}
	{
		const prefix string = ",\"sum\":"
		out.RawString(prefix)
		if in.Sum == nil {
			out.RawString("null")
		} else {
			tinyjson954708aaEncode(out, *in.Sum)
		}
	}
	{
		const prefix string = ",\"reducer\":"
		out.RawString(prefix)
		if in.Reducer == nil {
			out.RawString("null")
		} else {
			tinyjson954708aaEncode(out, *in.Reducer)
		}
	}
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix)
		if in.List == nil {
			out.RawString("null")
		} else {
			tinyjson954708aaEncode(out, *in.List)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc(l, v)
}
func tinyjson954708aaDecode(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncode(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc1(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc1(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Item) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Item) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc1(l, v)
}
func tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc2(in *jlexer.Lexer, out *InstantiateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc2(out *jwriter.Writer, in InstantiateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstantiateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InstantiateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InstantiateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc2(l, v)
}
func tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc3(in *jlexer.Lexer, out *ExecuteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueue":
			if in.IsNull() {
				in.Skip()
				out.Enqueue = nil
			} else {
				if out.Enqueue == nil {
					out.Enqueue = new(Enqueue)
				}
				(*out.Enqueue).UnmarshalTinyJSON(in)
			}
		case "dequeue":
			if in.IsNull() {
				in.Skip()
				out.Dequeue = nil
			} else {
				if out.Dequeue == nil {
					out.Dequeue = new(Dequeue)
				}
				(*out.Dequeue).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc3(out *jwriter.Writer, in ExecuteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enqueue\":"
		out.RawString(prefix[1:])
		if in.Enqueue == nil {
			out.RawString("null")
		} else {
			(*in.Enqueue).MarshalTinyJSON(out)
		}
	}
	{
		const prefix string = ",\"dequeue\":"
		out.RawString(prefix)
		if in.Dequeue == nil {
			out.RawString("null")
		} else {
			(*in.Dequeue).MarshalTinyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ExecuteMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc3(l, v)
}
func tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc4(in *jlexer.Lexer, out *Enqueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc4(out *jwriter.Writer, in Enqueue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Enqueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Enqueue) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Enqueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Enqueue) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc4(l, v)
}
func tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc5(in *jlexer.Lexer, out *Dequeue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc5(out *jwriter.Writer, in Dequeue) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dequeue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Dequeue) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson954708aaEncodeGithubComCosmwasmCosmwasmGoExampleQueueSrc5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dequeue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Dequeue) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson954708aaDecodeGithubComCosmwasmCosmwasmGoExampleQueueSrc5(l, v)
}
