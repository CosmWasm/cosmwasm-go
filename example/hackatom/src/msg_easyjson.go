// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package src

import (
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc(in *jlexer.Lexer, out *VerifierResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verifier":
			out.Verifier = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc(out *jwriter.Writer, in VerifierResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"verifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Verifier))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VerifierResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VerifierResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VerifierResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VerifierResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc1(in *jlexer.Lexer, out *RecurseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashed":
			out.Hashed = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc1(out *jwriter.Writer, in RecurseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashed\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hashed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecurseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecurseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecurseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecurseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc1(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc2(in *jlexer.Lexer, out *Recurse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "depth":
			out.Depth = uint32(in.Uint32())
		case "work":
			out.Work = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc2(out *jwriter.Writer, in Recurse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Depth != 0 {
		const prefix string = ",\"depth\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Depth))
	}
	if in.Work != 0 {
		const prefix string = ",\"work\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Work))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Recurse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Recurse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Recurse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Recurse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc2(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc3(in *jlexer.Lexer, out *QueryMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verifier":
			if in.IsNull() {
				in.Skip()
				out.Verifier = nil
			} else {
				if out.Verifier == nil {
					out.Verifier = new(struct{})
				}
				easyjson3bd68309Decode(in, out.Verifier)
			}
		case "other_balance":
			if in.IsNull() {
				in.Skip()
				out.OtherBalance = nil
			} else {
				if out.OtherBalance == nil {
					out.OtherBalance = new(OtherBalance)
				}
				(*out.OtherBalance).UnmarshalEasyJSON(in)
			}
		case "recurse":
			if in.IsNull() {
				in.Skip()
				out.Recurse = nil
			} else {
				if out.Recurse == nil {
					out.Recurse = new(Recurse)
				}
				(*out.Recurse).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc3(out *jwriter.Writer, in QueryMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Verifier != nil {
		const prefix string = ",\"verifier\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3bd68309Encode(out, *in.Verifier)
	}
	if in.OtherBalance != nil {
		const prefix string = ",\"other_balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherBalance).MarshalEasyJSON(out)
	}
	if in.Recurse != nil {
		const prefix string = ",\"recurse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Recurse).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc3(l, v)
}
func easyjson3bd68309Decode(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309Encode(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc4(in *jlexer.Lexer, out *OtherBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc4(out *jwriter.Writer, in OtherBalance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherBalance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherBalance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherBalance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherBalance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc4(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc5(in *jlexer.Lexer, out *MigrateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verifier":
			out.Verifier = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc5(out *jwriter.Writer, in MigrateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"verifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Verifier))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MigrateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MigrateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc5(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc6(in *jlexer.Lexer, out *InitMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verifier":
			out.Verifier = string(in.String())
		case "beneficiary":
			out.Beneficiary = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc6(out *jwriter.Writer, in InitMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"verifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Verifier))
	}
	{
		const prefix string = ",\"beneficiary\":"
		out.RawString(prefix)
		out.String(string(in.Beneficiary))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc6(l, v)
}
func easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc7(in *jlexer.Lexer, out *HandleMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "release":
			if in.IsNull() {
				in.Skip()
				out.Release = nil
			} else {
				if out.Release == nil {
					out.Release = new(struct{})
				}
				easyjson3bd68309Decode(in, out.Release)
			}
		case "cpu_loop":
			if in.IsNull() {
				in.Skip()
				out.CpuLoop = nil
			} else {
				if out.CpuLoop == nil {
					out.CpuLoop = new(struct{})
				}
				easyjson3bd68309Decode(in, out.CpuLoop)
			}
		case "storage_loop":
			if in.IsNull() {
				in.Skip()
				out.StorageLoop = nil
			} else {
				if out.StorageLoop == nil {
					out.StorageLoop = new(struct{})
				}
				easyjson3bd68309Decode(in, out.StorageLoop)
			}
		case "memory_loop":
			if in.IsNull() {
				in.Skip()
				out.MemoryLoop = nil
			} else {
				if out.MemoryLoop == nil {
					out.MemoryLoop = new(struct{})
				}
				easyjson3bd68309Decode(in, out.MemoryLoop)
			}
		case "allocate_large_memory":
			if in.IsNull() {
				in.Skip()
				out.AllocateLargeMemory = nil
			} else {
				if out.AllocateLargeMemory == nil {
					out.AllocateLargeMemory = new(struct{})
				}
				easyjson3bd68309Decode(in, out.AllocateLargeMemory)
			}
		case "panic":
			if in.IsNull() {
				in.Skip()
				out.Panic = nil
			} else {
				if out.Panic == nil {
					out.Panic = new(struct{})
				}
				easyjson3bd68309Decode(in, out.Panic)
			}
		case "user_errors_in_api_calls":
			if in.IsNull() {
				in.Skip()
				out.UserErrorsInApiCalls = nil
			} else {
				if out.UserErrorsInApiCalls == nil {
					out.UserErrorsInApiCalls = new(struct{})
				}
				easyjson3bd68309Decode(in, out.UserErrorsInApiCalls)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc7(out *jwriter.Writer, in HandleMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Release != nil {
		const prefix string = ",\"release\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3bd68309Encode(out, *in.Release)
	}
	if in.CpuLoop != nil {
		const prefix string = ",\"cpu_loop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3bd68309Encode(out, *in.CpuLoop)
	}
	if in.StorageLoop != nil {
		const prefix string = ",\"storage_loop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3bd68309Encode(out, *in.StorageLoop)
	}
	if in.MemoryLoop != nil {
		const prefix string = ",\"memory_loop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3bd68309Encode(out, *in.MemoryLoop)
	}
	if in.AllocateLargeMemory != nil {
		const prefix string = ",\"allocate_large_memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3bd68309Encode(out, *in.AllocateLargeMemory)
	}
	if in.Panic != nil {
		const prefix string = ",\"panic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3bd68309Encode(out, *in.Panic)
	}
	if in.UserErrorsInApiCalls != nil {
		const prefix string = ",\"user_errors_in_api_calls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3bd68309Encode(out, *in.UserErrorsInApiCalls)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HandleMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HandleMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HandleMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HandleMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComCosmwasmCosmwasmGoExampleHackatomSrc7(l, v)
}
